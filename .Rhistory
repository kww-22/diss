c_rom_ir <- ctr(ROM_IR_d)
c_rom_er <- ctr(ROM_ER_d)
})
ctr <- function(x){x - mean(x)}
data <- within(data,{
id <- factor(id)
trial <- factor(trial)
c_velo <- ctr(Velo)
c_weight <- ctr(Weight)
c_ir <- ctr(ISO_IR_d)
c_er <- ctr(ISO_ER_d)
c_rom_ir <- ctr(ROM_IR_d)
c_rom_er <- ctr(ROM_ER_d)
})
mod.0 <- lmer(Velo ~ Weight + peak_shldr_trans_net, data = data)
mod.0 <- lmer(Velo ~ Weight + peak_shldr_trans_net (1 | id), data = data)
mod.0 <- lmer(Velo ~ Weight + peak_shldr_trans_net + (1 | id), data = data)
ctr <- function(x){x - mean(x, na.rm = TRUE)}
data <- within(data,{
id <- factor(id)
trial <- factor(trial)
c_velo <- ctr(Velo)
c_weight <- ctr(Weight)
c_ir <- ctr(ISO_IR_d)
c_er <- ctr(ISO_ER_d)
c_rom_ir <- ctr(ROM_IR_d)
c_rom_er <- ctr(ROM_ER_d)
})
mod.0 <- lmer(Velo ~ Weight + peak_shldr_trans_net + (1 | id), data = data)
summary(mod.0)
mod.0 <- lmer(Velo ~ Weight + I(peak_shldr_trans_net / 1000) + (1 | id), data = data)
mod.0 <- lmer(Velo ~ Weight + I(peak_shldr_trans_net / 1000) + (1 | id), data = data, REML = FALSE)
summary(mod.0)
screenreg(mod.0)
library(lme4)
library(lmerTest)
library(lmSupport)
library(texreg)
screenreg(mod.0)
mod.0 <- lmer(Velo ~ c_Weight + I(peak_shldr_trans_net / 1000) + (1 | id), data = data, REML = FALSE)
mod.0 <- lmer(Velo ~ c_Weight + I(peak_shldr_trans_net / 1000) + (1 | id), data = data, REML = FALSE)
data <- within(data,{
id <- factor(id)
trial <- factor(trial)
c_velo <- ctr(Velo)
c_weight <- ctr(Weight)
c_ir <- ctr(ISO_IR_d)
c_er <- ctr(ISO_ER_d)
c_rom_ir <- ctr(ROM_IR_d)
c_rom_er <- ctr(ROM_ER_d)
})
mod.0 <- lmer(Velo ~ c_Weight + I(peak_shldr_trans_net / 1000) + (1 | id), data = data, REML = FALSE)
mod.0 <- lmer(Velo ~ ctr(Weight) + I(peak_shldr_trans_net / 1000) + (1 | id), data = data, REML = FALSE)
screenreg(mod.0)
mod.0 <- lmer(Velo ~ ctr(Weight) + I(peak_shldr_trans_net / 1000) + (1 | age), data = data, REML = FALSE)
mod.0 <- lmer(Velo ~ ctr(Weight) + I(peak_shldr_trans_net / 1000) + (1 | Age), data = data, REML = FALSE)
screenreg(mod.0)
mod.0 <- lmer(Velo ~ ctr(Weight) + I(peak_shldr_trans_net / 1000) + (1 | id), data = data, REML = FALSE)
screenreg(mod.0)
mod.0 <- lmer(Velo ~ ctr(Weight) + I(shldr_trans_net_cp / 1000) + (1 | id), data = data, REML = FALSE)
screenreg(mod.0)
mod.1 <- lm(Velo ~ Weight + peak_shldr_trans_net, data = data)
screenreg(mod.1)
mod.1 <- lm(Velo ~ c_Weight + I(peak_shldr_trans_net / 1000), data = data)
mod.1 <- lm(Velo ~ c_weight + I(peak_shldr_trans_net / 1000), data = data)
screenreg(mod.1)
mod.lin <- lm(Velo ~ c_weight + I(peak_shldr_trans_net / 1000), data = data)
mod.log <- update(mod.lin, . ~ . + log(I(peak_shldr_trans_net / 1000)))
screenreg(mod.lin, mod.log)
screenreg(list(mod.lin, mod.log))
mod.int <- lm(Velo ~ I(peak_shldr_trans_net / 1000) * log(I(peak_shldr_trans_net / 1000)), data = data)
screenreg(list(mod.lin, mod.log, mod.int))
mod.int <- lm(Velo ~ c_weight + I(peak_shldr_trans_net / 1000) * log(I(peak_shldr_trans_net / 1000)), data = data)
screenreg(list(mod.lin, mod.log, mod.int))
mod.w <- lmer(Velo ~ I(peak_shldr_trans_net / 1000) + (1 | Weight), data = data, REML = FALSE)
screenreg(mod.w)
screenreg(list(mod.lin, mod.log, mod.int))
library(lme4)
library(lmerTest)
library(lmSupport)
library(texreg)
GATmaster <- read.csv("C:/ProgramData/Innsport/Istmas/MotionMonitor/User/kww/Export/test/hide/GATmaster.csv")
View(GATmaster)
within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
})
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
})
mod <- lmer(Velo ~ shldr_trns_cp + (1|pID), data = GATmaster, REML = FALSE)
arm::display(mod)
summary(mod)
mod <- lmer(Velo ~ shldr_trns_cp + I(log(shldr_trns_cp) + (1|pID), data = GATmaster, REML = FALSE)
summary(mod)
mod <- lmer(Velo ~ shldr_trns_cp + I(log(shldr_trns_cp)) + (1|pID), data = GATmaster, REML = FALSE)
summary(mod)
mod <- lmer(Velo ~ I(log(shldr_trns_cp)) + (1|pID), data = GATmaster, REML = FALSE)
summary(mod)
mod <- lmer(Velo ~ I(log(shldr_trns_cp)) + (1|1), data = GATmaster, REML = FALSE)
mod <- lmer(Velo ~ I(log(shldr_trns_cp)) + (shldr_trns_cp|pID), data = GATmaster, REML = FALSE)
summary(mod)
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster, REML = FALSE)
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster)
summary(mod)
modkc <- update(mod, . ~ . - mass - shldr_trns_cp + PelvThor_trns_cp)
screenreg(list(mod,modkc))
mod <- update(mod, . ~ . - mass - shldr_trns_cp)
modkc <- update(mod, . ~ . + PelvThor_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . * PelvThor_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . * PelvThor_trns_sp)
screenreg(list(mod,modkc))
install.packages("interactions")
library(interactions)
mod <- update(mod, . ~ . - mass)
modkc <- update(mod, . ~ . * PelvThor_trns_sp)
screenreg(list(mod,modkc))
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster)
mod <- update(mod, . ~ . - mass)
modkc <- update(mod, . ~ . * PelvThor_trns_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_sp + shldr_trns_cp:PelvThor_trns_Sp)
screenreg(list(mod,modkc))
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster)
mod <- update(mod, . ~ . - mass)
modkc <- update(mod, . ~ . + PelvThor_trns_sp + shldr_trns_cp:PelvThor_trns_Sp)
modkc <- update(mod, . ~ . + PelvThor_trns_sp + shldr_trns_cp:PelvThor_trns_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fknee_abs_cp)
modkc <- update(mod, . ~ . + Fknee_gen_cp)
screenreg(list(mod,modkc))
GATmaster <- read.csv("C:/ProgramData/Innsport/Istmas/MotionMonitor/User/kww/Export/test/hide/GATmaster.csv")
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
})
modkc <- update(mod, . ~ . + Fknee_abs_cp)
GATmaster <- read.csv("C:/ProgramData/Innsport/Istmas/MotionMonitor/User/kww/Export/test/hide/GATmaster.csv")
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
})
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster)
mod <- update(mod, . ~ . - mass)
modkc <- update(mod, . ~ . + Fknee_abs_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . : Fknee_abs_cp)
screenreg(list(mod,modkc))
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster)
modkc <- update(mod, . ~ . + Fknee_abs_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fknee_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_ap)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_cp + shldr_trns_cp:PelvThor_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_cp + I(log(shldr_trns_cp)):PelvThor_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_trns_cp)
screenreg(list(mod,modkc))
library(psych)
modkc <- update(mod, . ~ . + ISO_IR_d)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . PelvThor_gen_cp)
screenreg(list(mod,modkc))
mod <- lm(Velo ~ mass + shldr_trns_cp + I(log(shldr_trns_cp)), data = GATmaster)
modkc <- update(mod, . ~ . PelvThor_gen_cp)
modkc <- update(mod, . ~ . + PelvThor_gen_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + PelvThor_gen_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fhip_trns_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fhip_trns_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fhip_gen_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fhip_gen_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fhip_abs_sp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fhip_abs_cp)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + Fknee_abs_cp)
screenreg(list(mod,modkc))
GATmaster <- read.csv("C:/ProgramData/Innsport/Istmas/MotionMonitor/User/kww/Export/test/hide/GATmaster.csv")
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
})
modkc <- update(mod, . ~ . + pFknee_abs)
screenreg(list(mod,modkc))
modkc <- update(mod, . ~ . + pFhip_abs)
screenreg(list(mod,modkc))
mod <- lm(Velo ~ mass + pShldr_trns + I(log(pShldr_trns)), data = GATmaster)
modkc <- update(mod, . ~ . + pFhip_abs)
screenreg(list(mod,modkc))
mod.lin <- lm(Velo ~ mass + pShldr_trns, data = GATmaster)
mod.log <- update(mod, . ~ .  + I(log(pShldr_trns)))
screenreg(list(mod.lin,mod.log))
mod.lin <- lm(Velo ~ mass + I(pShldr_trns / 1000), data = GATmaster)
mod.log <- update(mod, . ~ .  + log(I(pShldr_trns / 1000)))
screenreg(list(mod.lin,mod.log))
mod.lin <- lm(Velo ~ mass + I(pShldr_trns / 1000), data = GATmaster)
mod.log <- update(mod, . ~ .  + log(I(pShldr_trns / 1000)))
screenreg(list(mod.lin,mod.log))
mod.lin <- lm(Velo ~ mass + I(pShldr_trns / 1000), data = GATmaster)
mod.log <- update(mod, . ~ .  + log(I(pShldr_trns / 1000)))
screenreg(list(mod.lin,mod.log))
mod.log <- update(mod, . ~ . - pShldr_trns  + log(I(pShldr_trns / 1000)))
screenreg(list(mod.lin,mod.log))
mod.lin <- lm(Velo ~ mass + I(pShldr_trns / 1000), data = GATmaster)
mod.log <- update(mod, . ~ . + log(I(pShldr_trns / 1000)))
screenreg(list(mod.lin,mod.log))
mod.log <- lm(Velo ~ mass + I(pShldr_trns / 1000) + log(I(pShldr_trns / 1000)), data = GATmaster)
screenreg(list(mod.lin,mod.log))
mod.log <- lm(Velo ~ mass + I(pShldr_trns / 1000) * log(I(pShldr_trns / 1000)), data = GATmaster)
screenreg(list(mod.lin,mod.log))
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
pShldr_trns <- pShldr_trns / 1000
})
mod.lin <- lm(Velo ~ mass + pShldr_trns, data = GATmaster)
mod.log <- lm(Velo ~ mass + pShldr_trns * log(pShldr_trns), data = GATmaster)
screenreg(list(mod.lin,mod.log))
interact_plot(model = mod.log, pred = pShldr_trns, modx = log(pShldr_trns))
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
pShldr_trns <- pShldr_trns / 1000
l_pShldr_trns <- log(pShldr_trns)
})
mod.lin <- lm(Velo ~ mass + pShldr_trns, data = GATmaster)
mod.log <- lm(Velo ~ mass + pShldr_trns * l_pShldr_trns, data = GATmaster)
interact_plot(model = mod.log, pred = pShldr_trns, modx = l_pShldr_trns)
GATmaster <- read.csv("C:/ProgramData/Innsport/Istmas/MotionMonitor/User/kww/Export/test/hide/GATmaster.csv")
GATmaster <- within(GATmaster,{
pID <- factor(pID)
trial <- factor(trial)
pShldr_trns <- pShldr_trns / 1000
l_pShldr_trns <- log(pShldr_trns)
})
mod.lin <- lm(Velo ~ mass + pShldr_trns, data = GATmaster)
mod.log <- lm(Velo ~ mass + pShldr_trns * l_pShldr_trns, data = GATmaster)
library(interactions)
interact_plot(model = mod.log, pred = pShldr_trns, modx = l_pShldr_trns)
mod.log <- lm(Velo ~ mass + pShldr_trns * l_pShldr_trns, data = GATmaster)
screenreg(list(mod.lin,mod.log))
mod.log <- lm(Velo ~ mass + pShldr_trns + l_pShldr_trns, data = GATmaster)
screenreg(list(mod.lin,mod.log))
mod.log <- lm(Velo ~ mass + pShldr_trns + log(pShldr_trns), data = GATmaster)
screenreg(list(mod.lin,mod.log))
modkc <- update(mod.log, . ~ . + pFhip_abs)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + pFhip_trns)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + pFknee_trns)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + pPelvThor_trns)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + pPelvThor_gen)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + pShldr_trns:pPelvThor_gen)
screenreg(list(mod.lin,mod.log,modkc))
interact_plot(model = modkc, pred = pShldr_trns, modx = pPelvThor_gen)
modkc <- update(mod.log, . ~ . + pShldr_trns:PelvThor_gen_cp)
screenreg(list(mod.lin,mod.log,modkc))
interact_plot(model = modkc, pred = pShldr_trns, modx = PelvThor_gen_cp)
mod.lin <- lm(Velo ~ mass + shldr_trns_cp, data = GATmaster)
mod.log <- lm(Velo ~ mass + shldr_trns_cp + log(shldr_trns_cp), data = GATmaster)
modkc <- update(mod.log, . ~ . + pShldr_trns:PelvThor_gen_cp)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + shldr_trns_cp:PelvThor_gen_cp)
screenreg(list(mod.lin,mod.log,modkc))
modkc <- update(mod.log, . ~ . + shldr_trns_cp:PelvThor_gen_sp)
screenreg(list(mod.lin,mod.log,modkc))
mod.lin <- lm(Velo ~ mass + pShldr_trns, data = GATmaster)
mod.log <- update(mod.lin, .~. + log(pShldr_trns))
modkc <- update(mod.log, . ~ . + pShldr_trns:pPelvThor_gen)
screenreg(list(mod.lin,mod.log,modkc))
install.packages(c("AICcmodavg", "backports", "bayestestR", "broom", "devtools", "dplyr", "DT", "emmeans", "fs", "ggplot2", "glue", "gplots", "htmlTable", "htmltools", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "mvtnorm", "nloptr", "openssl", "performance", "pillar", "pkgbuild", "processx", "promises", "quantreg", "raster", "Rcpp", "RcppArmadillo", "remotes", "rlang", "rmarkdown", "roxygen2", "shiny", "survival", "sys", "texreg", "tibble", "tinytex", "unmarked", "vctrs", "xfun"))
install.packages(c("AICcmodavg", "backports", "bayestestR", "broom", "devtools", "dplyr", "DT", "emmeans", "fs", "ggplot2", "glue", "gplots", "htmlTable", "htmltools", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "mvtnorm", "nloptr", "openssl", "performance", "pillar", "pkgbuild", "processx", "promises", "quantreg", "raster", "Rcpp", "RcppArmadillo", "remotes", "rlang", "rmarkdown", "roxygen2", "shiny", "survival", "sys", "texreg", "tibble", "tinytex", "unmarked", "vctrs", "xfun"))
install.packages(c("AICcmodavg", "backports", "bayestestR", "broom", "devtools", "dplyr", "DT", "emmeans", "fs", "ggplot2", "glue", "gplots", "htmlTable", "htmltools", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "mvtnorm", "nloptr", "openssl", "performance", "pillar", "pkgbuild", "processx", "promises", "quantreg", "raster", "Rcpp", "RcppArmadillo", "remotes", "rlang", "rmarkdown", "roxygen2", "shiny", "survival", "sys", "texreg", "tibble", "tinytex", "unmarked", "vctrs", "xfun"))
install.packages("psych")
library(lme4)
library(lmerTest)
library(lmSupport)
library(texreg)
library(interactions)
library(psych)
psych::modelCompare(mod.log,modkc)
# ----------------------------------------------------
# get_velos.R
#
# Purpose: to Import velos from data collection googlesheets
# and separate them by participant
#
# retrieves velos from googlesheet, cleans data frame
# and saves them to the 'velo_csvs' subfolder
#
# author: Kyle Wasserberger
#
# Last Updated: 2021-04-27
# ----------------------------------------------------
# library(googlesheets4)
# library(tidyverse)
get_velos <- function(){
require(googlesheets4)
require(tidyverse)
# edit url if you need to access different googlesheet
url <- 'https://docs.google.com/spreadsheets/d/1PRBYjZcG9b8jB1vttNicup2MhdabkgZY-tJQMLTPxKc/'
# get individual sheet info and subset out demos and template sheets
sheet_info <- gs4_get(url)
sheet_names <- sheet_info[["sheets"]][["name"]]
# all participant data sheets are "pXX" so they have a sheet name of length 3
p_sheets <- sheet_names[str_length(sheet_names) == 3]
sheets_final <- rev(select.list(p_sheets, multiple = TRUE, graphics = TRUE, preselect = p_sheets))
if(is_empty(sheets_final)){
stop('no sheets selected')
}
# get directory path for csv saving
path <- getwd()
# get demo info for level 2 vars
# filtering by pNums listed above
demos <- read_sheet(ss = url, sheet = 'Demos') %>%
filter(pNum %in% sheets_final)
# loops through saving each csvs for each sheet with custom titles based on sheet name
for(i in 1:length(sheets_final)){
# read everything on sheet i
data <- read_sheet(ss = url, sheet = sheets_final[i])
# select warmup throws, rename, and clean data
data_warmup <- data[-1,] %>%
select(c('Throw', 'Vel_warm'))
data_warmup <- data_warmup[1:demos$NumThrows[i],]
data_warmup <- rename(data_warmup,
velo = Vel_warm,
throw = Throw)
data_warmup$velo <- as.numeric(data_warmup$velo)
data_warmup <- mutate(data_warmup, pID = sheets_final[i],
velo_max = max(velo, na.rm = TRUE),
velo_min = min(velo, na.rm = TRUE),
height = demos$Height[i],
mass = demos$Weight[i],
age = demos$Age[i],
hand = factor(demos$Hand[i]))
data_warmup <- data_warmup[,c('pID','age', 'mass', 'height', 'hand', 'velo_max', 'velo_min', 'throw', 'velo')]
# select condition throws, rename, and clean data
data_conds <- data %>%
select(c('Effort', 'Cond1', 'Cond2', 'Vel_cons'))
data_conds <- data_conds[-which(is.na(data_conds$Cond1)),] %>%
mutate(pID = factor(sheets_final[i]),
Effort = factor(Effort, levels = c('50', '75', '100')),
Cond1 = factor(Cond1, levels = c('step', 'crow')),
Cond2 = factor(Cond2, levels = c('rpe','velo')))
# get condition df in same order as c3d files
data_conds <- data_conds %>%
rename(cond_stp = Cond1,
cond_int = Cond2,
velo = Vel_cons,
effort = Effort) %>%
arrange(pID,cond_int,effort,desc(cond_stp))
data_conds <- data_conds[,c('pID','cond_int','effort','cond_stp','velo')]
# create file names for csvs
file_name_warmup <- str_glue(path, '/sup/velo_csvs/', sheets_final[i],'_','velos_warmup.csv')
file_name_conds <- str_glue(path,'/sup/velo_csvs/',sheets_final[i], '_', 'velos_conds.csv')
write_csv(data_warmup, file_name_warmup)
write_csv(data_conds, file_name_conds)
# checks to make sure csv files exist in save directory
if(file.exists(file_name_conds) == TRUE & file.exists(file_name_warmup) == TRUE){
print(str_glue('velos extracted for ', sheets_final[i]))
}else{
stop('something went wrong, bro')
}
}
# get directory path and file info
path <- str_glue(getwd(),'sup/velo_csvs',.sep = '/')
files <- list.files(path = path, pattern = '_')
# create numeric vectors so for loops can separate warmup and condition velo files
file_num_conds <- seq(1,length(files),2)
file_num_warm <- seq(2,length(files),2)
# initialize blank data frames
data_conds <- data.frame()
data_warm <- data.frame()
# iterate over data frames using row bind
for(i in 1:I(length(files)/2)){
data_new <- read.csv(str_glue(path,files[file_num_conds[i]], .sep = '/'))
data_conds <- rbind.data.frame(data_conds, data_new)
data_new <- read.csv(str_glue(path,files[file_num_warm[i]], .sep = '/'))
data_warm <- rbind.data.frame(data_warm, data_new)
}
data_conds <- write.csv(data_conds, str_glue(path, 'masters', 'data_conds.csv', .sep = '/'))
data_warm <- write.csv(data_warm, str_glue(path, 'masters', 'data_warm.csv', .sep = '/'))
}
get_velos()
getwd()
setwd("~/GitHub/diss")
# ----------------------------------------------------
# get_velos.R
#
# Purpose: to Import velos from data collection googlesheets
# and separate them by participant
#
# retrieves velos from googlesheet, cleans data frame
# and saves them to the 'velo_csvs' subfolder
#
# author: Kyle Wasserberger
#
# Last Updated: 2021-04-27
# ----------------------------------------------------
# library(googlesheets4)
# library(tidyverse)
get_velos <- function(){
require(googlesheets4)
require(tidyverse)
# edit url if you need to access different googlesheet
url <- 'https://docs.google.com/spreadsheets/d/1PRBYjZcG9b8jB1vttNicup2MhdabkgZY-tJQMLTPxKc/'
# get individual sheet info and subset out demos and template sheets
sheet_info <- gs4_get(url)
sheet_names <- sheet_info[["sheets"]][["name"]]
# all participant data sheets are "pXX" so they have a sheet name of length 3
p_sheets <- sheet_names[str_length(sheet_names) == 3]
sheets_final <- rev(select.list(p_sheets, multiple = TRUE, graphics = TRUE, preselect = p_sheets))
if(is_empty(sheets_final)){
stop('no sheets selected')
}
# get directory path for csv saving
path <- getwd()
# get demo info for level 2 vars
# filtering by pNums listed above
demos <- read_sheet(ss = url, sheet = 'Demos') %>%
filter(pNum %in% sheets_final)
# loops through saving each csvs for each sheet with custom titles based on sheet name
for(i in 1:length(sheets_final)){
# read everything on sheet i
data <- read_sheet(ss = url, sheet = sheets_final[i])
# select warmup throws, rename, and clean data
data_warmup <- data[-1,] %>%
select(c('Throw', 'Vel_warm'))
data_warmup <- data_warmup[1:demos$NumThrows[i],]
data_warmup <- rename(data_warmup,
velo = Vel_warm,
throw = Throw)
data_warmup$velo <- as.numeric(data_warmup$velo)
data_warmup <- mutate(data_warmup, pID = sheets_final[i],
velo_max = max(velo, na.rm = TRUE),
velo_min = min(velo, na.rm = TRUE),
height = demos$Height[i],
mass = demos$Weight[i],
age = demos$Age[i],
hand = factor(demos$Hand[i]))
data_warmup <- data_warmup[,c('pID','age', 'mass', 'height', 'hand', 'velo_max', 'velo_min', 'throw', 'velo')]
# select condition throws, rename, and clean data
data_conds <- data %>%
select(c('Effort', 'Cond1', 'Cond2', 'Vel_cons'))
data_conds <- data_conds[-which(is.na(data_conds$Cond1)),] %>%
mutate(pID = factor(sheets_final[i]),
Effort = factor(Effort, levels = c('50', '75', '100')),
Cond1 = factor(Cond1, levels = c('step', 'crow')),
Cond2 = factor(Cond2, levels = c('rpe','velo')))
# get condition df in same order as c3d files
data_conds <- data_conds %>%
rename(cond_stp = Cond1,
cond_int = Cond2,
velo = Vel_cons,
effort = Effort) %>%
arrange(pID,cond_int,effort,desc(cond_stp))
data_conds <- data_conds[,c('pID','cond_int','effort','cond_stp','velo')]
# create file names for csvs
file_name_warmup <- str_glue(path, '/sup/velo_csvs/', sheets_final[i],'_','velos_warmup.csv')
file_name_conds <- str_glue(path,'/sup/velo_csvs/',sheets_final[i], '_', 'velos_conds.csv')
write_csv(data_warmup, file_name_warmup)
write_csv(data_conds, file_name_conds)
# checks to make sure csv files exist in save directory
if(file.exists(file_name_conds) == TRUE & file.exists(file_name_warmup) == TRUE){
print(str_glue('velos extracted for ', sheets_final[i]))
}else{
stop('something went wrong, bro')
}
}
# get directory path and file info
path <- str_glue(getwd(),'sup/velo_csvs',.sep = '/')
files <- list.files(path = path, pattern = '_')
# create numeric vectors so for loops can separate warmup and condition velo files
file_num_conds <- seq(1,length(files),2)
file_num_warm <- seq(2,length(files),2)
# initialize blank data frames
data_conds <- data.frame()
data_warm <- data.frame()
# iterate over data frames using row bind
for(i in 1:I(length(files)/2)){
data_new <- read.csv(str_glue(path,files[file_num_conds[i]], .sep = '/'))
data_conds <- rbind.data.frame(data_conds, data_new)
data_new <- read.csv(str_glue(path,files[file_num_warm[i]], .sep = '/'))
data_warm <- rbind.data.frame(data_warm, data_new)
}
data_conds <- write.csv(data_conds, str_glue(path, 'masters', 'data_conds.csv', .sep = '/'))
data_warm <- write.csv(data_warm, str_glue(path, 'masters', 'data_warm.csv', .sep = '/'))
}
get_velos()
